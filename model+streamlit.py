# -*- coding: utf-8 -*-
"""Untitled28.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G9vKS9BQErAD1DY7osi3MJHtIOdXhQfm
"""

import numpy as np 
import pandas as pd

df = pd.read_csv('new_quotes.csv')
#df

df.rename(columns = {'Unnamed: 0':'ID'}, inplace = True)

import re
def preprocess(text):
    text = re.sub(r'[^\w\s\']',' ', text)
    return text.strip().lower()

df['quote'] = df['quote'].map(preprocess)
df['author']=df['author'].map(preprocess)

#df

df['author']=df['author'].str.replace(' ', '')

#df

df['tags']=df['quote']+' '+df['author']+' '+df['category']

#df['tags'].iloc[0]

new_df=df.drop(columns=['author','category'])

#new_df

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000)

vector = cv.fit_transform(new_df['tags']).toarray()

#vector.shape

from sklearn.metrics.pairwise import cosine_similarity

similarity = cosine_similarity(vector)

#similarity

def recommend(quote):
    l1=[]
    index = new_df[new_df['quote'] == quote].index[0]
    distances = sorted(list(enumerate(similarity[index])),reverse=True,key = lambda x: x[1])
    for i in distances[1:6]:
        l1.append(new_df.iloc[i[0]].quote)
    return l1

#new_df['quote'].iloc[0]

l1=recommend('the coming era of artificial intelligence will not be the era of war  but be the era of deep compassion  non violence  and love')

for i in range(len(l1)):
    print(i+1,". ",l1[i])

import pickle

pickle.dump(new_df,open('quote_list.pkl','wb'))
pickle.dump(similarity,open('similarity.pkl','wb'))

primaryColor="#FF4B4B"
backgroundColor="#0E1117"
secondaryBackgroundColor="#262730"
textColor="#FAFAFA"
font="sans serif"




import streamlit as st
st.header('Quote Recommender System')

def recommend(quote):
    index = new_df[new_df['quote'] == quote].index[0]
    distances = sorted(list(enumerate(similarity[index])), reverse=True, key=lambda x: x[1])
    recommended_quote_names = []
    for i in distances[1:6]:
        # fetch the movie poster
        quote_id = new_df.iloc[i[0]].quote
        recommended_quote_names.append(new_df.iloc[i[0]].quote)

    return recommended_quote_names

text_input = st.text_input(
        "Enter some text ðŸ‘‡",
    )

if text_input:
  st.write("You entered: ", text_input)

if st.button('Show Recommendation'):
  recommended_quote_names= recommend(text_input)
  st.markdown(recommended_quote_names[0])
  st.markdown(recommended_quote_names[1])
  st.markdown(recommended_quote_names[2])
  st.markdown(recommended_quote_names[3])
  st.markdown(recommended_quote_names[4])